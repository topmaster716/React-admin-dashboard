(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("enzyme"), require("jsonfile"), require("path"), require("react"), require("react-intl"));
	else if(typeof define === 'function' && define.amd)
		define("enzyme-react-intl", ["enzyme", "jsonfile", "path", "react", "react-intl"], factory);
	else if(typeof exports === 'object')
		exports["enzyme-react-intl"] = factory(require("enzyme"), require("jsonfile"), require("path"), require("react"), require("react-intl"));
	else
		root["enzyme-react-intl"] = factory(root["enzyme"], root["jsonfile"], root["path"], root["react"], root["react-intl"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__dirname) {

var _react = __webpack_require__(4);

var _react2 = _interopRequireDefault(_react);

var _reactIntl = __webpack_require__(5);

var _enzyme = __webpack_require__(1);

var _jsonfile = __webpack_require__(2);

var _jsonfile2 = _interopRequireDefault(_jsonfile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var path = __webpack_require__(3);
var locale = 'en';
var intl = {};
var messages = {};

/**
 * Loads translation file.
 * @param {string} localeFilePath
 * @return {object} messages
 */
function loadTranslation(localeFilePath) {
    if (typeof localeFilePath == "undefined") {
        messages = {};
        return null;
    }
    var fp = path.join(__dirname, localeFilePath);
    messages = _jsonfile2.default.readFileSync("." + fp);
    return messages;
}

/**
 * Set translations object.
 * @param {string} localeFilePath
 * @return {object} messages
 */
function loadTranslationObject(translations) {
    if (typeof translations === "undefined") {
        messages = {};
        return null;
    }

    messages = translations;
    return messages;
}

/**
 * Equivalent to enzyme's 'shallow' method.
 * @param {string} node React Component that requires react-intl.
 * @return {object}
 */
function shallowWithIntl(node) {
    var intlProvider = new _reactIntl.IntlProvider({ locale: locale, messages: messages }, {});

    var _intlProvider$getChil = intlProvider.getChildContext(),
        intl = _intlProvider$getChil.intl;

    return (0, _enzyme.shallow)(_react2.default.cloneElement(node, { intl: intl }), { context: { intl: intl } });
}

/**
 * Equivalent to enzyme's 'mount' method.
 * @param {string} node React Component that requires react-intl.
 * @return {object}
 */
function mountWithIntl(node) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        context = _ref.context,
        childContextTypes = _ref.childContextTypes;

    var intlProvider = new _reactIntl.IntlProvider({ locale: locale, messages: messages }, {});

    var _intlProvider$getChil2 = intlProvider.getChildContext(),
        intl = _intlProvider$getChil2.intl;

    return (0, _enzyme.mount)(_react2.default.cloneElement(node, { intl: intl }), {
        context: Object.assign({}, context, { intl: intl }),
        childContextTypes: Object.assign({}, { intl: _reactIntl.intlShape }, childContextTypes)
    });
}

function getLocale() {
    return locale;
}

function setLocale(str) {
    locale = str;
}

var enzymeReactIntl = {
    loadTranslation: loadTranslation,
    loadTranslationObject: loadTranslationObject,
    shallowWithIntl: shallowWithIntl,
    mountWithIntl: mountWithIntl,
    setLocale: setLocale,
    getLocale: getLocale
};
module.exports = enzymeReactIntl;
/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("enzyme");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("jsonfile");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("react-intl");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(0);


/***/ })
/******/ ]);
});
//# sourceMappingURL=enzyme-react-intl.js.map