import PropTypes from 'prop-types';
import React from 'react';
import classNames from './classNames';

var cx = classNames('Highlight');

function generateKey(i, value) {
  return 'split-' + i + '-' + value;
}

export var Highlight = function Highlight(_ref) {
  var value = _ref.value,
      highlightedTagName = _ref.highlightedTagName,
      isHighlighted = _ref.isHighlighted,
      nonHighlightedTagName = _ref.nonHighlightedTagName;

  var TagName = isHighlighted ? highlightedTagName : nonHighlightedTagName;
  var className = isHighlighted ? 'highlighted' : 'nonHighlighted';
  return React.createElement(
    TagName,
    cx(className),
    value
  );
};

Highlight.propTypes = {
  value: PropTypes.string.isRequired,
  isHighlighted: PropTypes.bool.isRequired,
  highlightedTagName: PropTypes.string.isRequired,
  nonHighlightedTagName: PropTypes.string.isRequired
};

export default function Highlighter(_ref2) {
  var hit = _ref2.hit,
      attributeName = _ref2.attributeName,
      highlight = _ref2.highlight,
      highlightProperty = _ref2.highlightProperty,
      tagName = _ref2.tagName,
      nonHighlightedTagName = _ref2.nonHighlightedTagName,
      separator = _ref2.separator;

  var parsedHighlightedValue = highlight({
    hit: hit,
    attributeName: attributeName,
    highlightProperty: highlightProperty
  });

  return React.createElement(
    'span',
    { className: 'ais-Highlight' },
    parsedHighlightedValue.map(function (item, i) {
      if (Array.isArray(item)) {
        var isLast = i === parsedHighlightedValue.length - 1;
        return React.createElement(
          'span',
          { key: generateKey(i, hit[attributeName][i]) },
          item.map(function (element, index) {
            return React.createElement(Highlight, {
              key: generateKey(index, element.value),
              value: element.value,
              highlightedTagName: tagName,
              nonHighlightedTagName: nonHighlightedTagName,
              isHighlighted: element.isHighlighted
            });
          }),
          !isLast && React.createElement(
            'span',
            cx('separator'),
            separator
          )
        );
      }

      return React.createElement(Highlight, {
        key: generateKey(i, item.value),
        value: item.value,
        highlightedTagName: tagName,
        nonHighlightedTagName: nonHighlightedTagName,
        isHighlighted: item.isHighlighted
      });
    })
  );
}

Highlighter.propTypes = {
  hit: PropTypes.object.isRequired,
  attributeName: PropTypes.string.isRequired,
  highlight: PropTypes.func.isRequired,
  highlightProperty: PropTypes.string.isRequired,
  tagName: PropTypes.string,
  nonHighlightedTagName: PropTypes.string,
  separator: PropTypes.node
};

Highlighter.defaultProps = {
  tagName: 'em',
  nonHighlightedTagName: 'span',
  separator: ', '
};