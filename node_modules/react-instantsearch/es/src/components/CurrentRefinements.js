var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropTypes from 'prop-types';
import React, { Component } from 'react';

import translatable from '../core/translatable';
import classNames from './classNames.js';

var cx = classNames('CurrentRefinements');

var CurrentRefinements = function (_Component) {
  _inherits(CurrentRefinements, _Component);

  function CurrentRefinements() {
    _classCallCheck(this, CurrentRefinements);

    return _possibleConstructorReturn(this, (CurrentRefinements.__proto__ || Object.getPrototypeOf(CurrentRefinements)).apply(this, arguments));
  }

  _createClass(CurrentRefinements, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (this.context.canRefine) this.context.canRefine(this.props.canRefine);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (this.context.canRefine) this.context.canRefine(props.canRefine);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          translate = _props.translate,
          items = _props.items,
          refine = _props.refine,
          canRefine = _props.canRefine;


      return React.createElement(
        'div',
        cx('root', !canRefine && 'noRefinement'),
        React.createElement(
          'div',
          cx('items'),
          items.map(function (item) {
            return React.createElement(
              'div',
              _extends({ key: item.label }, cx('item', item.items && 'itemParent')),
              React.createElement(
                'span',
                cx('itemLabel'),
                item.label
              ),
              item.items ? item.items.map(function (nestedItem) {
                return React.createElement(
                  'div',
                  _extends({ key: nestedItem.label }, cx('item')),
                  React.createElement(
                    'span',
                    cx('itemLabel'),
                    nestedItem.label
                  ),
                  React.createElement(
                    'button',
                    _extends({}, cx('itemClear'), {
                      onClick: function onClick() {
                        return refine(nestedItem.value);
                      }
                    }),
                    translate('clearFilter', nestedItem)
                  )
                );
              }) : React.createElement(
                'button',
                _extends({}, cx('itemClear'), { onClick: function onClick() {
                    return refine(item.value);
                  } }),
                translate('clearFilter', item)
              )
            );
          })
        )
      );
    }
  }]);

  return CurrentRefinements;
}(Component);

CurrentRefinements.propTypes = {
  translate: PropTypes.func.isRequired,
  items: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string
  })).isRequired,
  refine: PropTypes.func.isRequired,
  canRefine: PropTypes.bool.isRequired,
  transformItems: PropTypes.func
};
CurrentRefinements.contextTypes = {
  canRefine: PropTypes.func
};


export default translatable({
  clearFilter: 'âœ•'
})(CurrentRefinements);