import _pick from 'lodash/pick';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropTypes from 'prop-types';
import React, { Component } from 'react';

import translatable from '../core/translatable';
import List from './List';
import classNames from './classNames.js';
import Highlight from '../widgets/Highlight';
var cx = classNames('RefinementList');

var RefinementList = function (_Component) {
  _inherits(RefinementList, _Component);

  function RefinementList(props) {
    _classCallCheck(this, RefinementList);

    var _this = _possibleConstructorReturn(this, (RefinementList.__proto__ || Object.getPrototypeOf(RefinementList)).call(this, props));

    _this.selectItem = function (item, resetQuery) {
      resetQuery();
      _this.props.refine(item.value);
    };

    _this.renderItem = function (item, resetQuery) {
      var label = _this.props.isFromSearch ? React.createElement(Highlight, { attributeName: 'label', hit: item }) : item.label;

      return React.createElement(
        'label',
        null,
        React.createElement('input', _extends({}, cx('itemCheckbox', item.isRefined && 'itemCheckboxSelected'), {
          type: 'checkbox',
          checked: item.isRefined,
          onChange: function onChange() {
            return _this.selectItem(item, resetQuery);
          }
        })),
        React.createElement('span', cx('itemBox', 'itemBox', item.isRefined && 'itemBoxSelected')),
        React.createElement(
          'span',
          cx('itemLabel', 'itemLabel', item.isRefined && 'itemLabelSelected'),
          label
        ),
        ' ',
        React.createElement(
          'span',
          cx('itemCount', item.isRefined && 'itemCountSelected'),
          item.count.toLocaleString()
        )
      );
    };

    _this.state = { query: '' };
    return _this;
  }

  _createClass(RefinementList, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (this.context.canRefine) this.context.canRefine(this.props.canRefine);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      if (this.context.canRefine) this.context.canRefine(props.canRefine);
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        'div',
        null,
        React.createElement(List, _extends({
          renderItem: this.renderItem,
          selectItem: this.selectItem,
          cx: cx
        }, _pick(this.props, ['translate', 'items', 'showMore', 'limitMin', 'limitMax', 'isFromSearch', 'searchForItems', 'withSearchBox', 'canRefine']), {
          query: this.state.query
        }))
      );
    }
  }]);

  return RefinementList;
}(Component);

RefinementList.propTypes = {
  translate: PropTypes.func.isRequired,
  refine: PropTypes.func.isRequired,
  searchForItems: PropTypes.func.isRequired,
  withSearchBox: PropTypes.bool,
  createURL: PropTypes.func.isRequired,
  items: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string.isRequired,
    value: PropTypes.arrayOf(PropTypes.string).isRequired,
    count: PropTypes.number.isRequired,
    isRefined: PropTypes.bool.isRequired
  })),
  isFromSearch: PropTypes.bool.isRequired,
  canRefine: PropTypes.bool.isRequired,
  showMore: PropTypes.bool,
  limitMin: PropTypes.number,
  limitMax: PropTypes.number,
  transformItems: PropTypes.func
};
RefinementList.contextTypes = {
  canRefine: PropTypes.func
};


export default translatable({
  showMore: function showMore(extended) {
    return extended ? 'Show less' : 'Show more';
  },
  noResults: 'No results',
  submit: null,
  reset: null,
  resetTitle: 'Clear the search query.',
  submitTitle: 'Submit your search query.',
  placeholder: 'Search hereâ€¦'
})(RefinementList);