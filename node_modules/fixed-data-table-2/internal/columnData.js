/**
 * Copyright Schrodinger, LLC
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule columnData
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _convertColumnElementsToData = require('./convertColumnElementsToData');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _forEach = require('lodash/forEach');

var _forEach2 = _interopRequireDefault(_forEach);

var _invariant = require('./invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _isFunction = require('lodash/isFunction');

var _isFunction2 = _interopRequireDefault(_isFunction);

var _map = require('lodash/map');

var _map2 = _interopRequireDefault(_map);

var _shallowEqualSelector = require('./shallowEqualSelector');

var _shallowEqualSelector2 = _interopRequireDefault(_shallowEqualSelector);

var _pick = require('lodash/pick');

var _pick2 = _interopRequireDefault(_pick);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Converts React column / column group elements into props and cell rendering templates
 */
function convertColumnElementsToData(childComponents) {
  var children = [];
  _react2.default.Children.forEach(childComponents, function (child) {
    if (child == null) {
      return;
    }
    (0, _invariant2.default)(child.type.__TableColumnGroup__ || child.type.__TableColumn__, 'child type should be <FixedDataTableColumn /> or <FixedDataTableColumnGroup />');

    children.push(child);
  });

  var elementTemplates = (0, _convertColumnElementsToData.getDefaultElementTemplates)();

  var columnProps = [];
  var hasGroupHeader = children.length && children[0].type.__TableColumnGroup__;
  if (hasGroupHeader) {
    var columnGroupProps = (0, _map2.default)(children, _convertColumnElementsToData.extractPropsFromElement);
    (0, _forEach2.default)(children, function (columnGroupElement, index) {
      elementTemplates.groupHeader.push(columnGroupElement.props.header);

      _react2.default.Children.forEach(columnGroupElement.props.children, function (child) {
        var column = (0, _convertColumnElementsToData.extractPropsFromElement)(child);
        column.groupIdx = index;
        columnProps.push(column);
        (0, _convertColumnElementsToData.extractTemplatesFromElement)(elementTemplates, child);
      });
    });

    return {
      columnGroupProps: columnGroupProps,
      columnProps: columnProps,
      elementTemplates: elementTemplates,
      useGroupHeader: true
    };
  }

  // Use a default column group
  (0, _forEach2.default)(children, function (child) {
    columnProps.push((0, _convertColumnElementsToData.extractPropsFromElement)(child));
    (0, _convertColumnElementsToData.extractTemplatesFromElement)(elementTemplates, child);
  });
  return {
    columnGroupProps: [],
    columnProps: columnProps,
    elementTemplates: elementTemplates,
    useGroupHeader: false
  };
}

function fixColumnPropsWithColumnGroupProps(columnProps, columnGroupProps) {
  var columnGroups = [];
  var columnsWithDefinedGroupIndex = 0;

  (0, _forEach2.default)(columnProps, function (_ref) {
    var groupIdx = _ref.groupIdx;

    if (groupIdx !== undefined && groupIdx !== null) {
      columnGroups[groupIdx] = true;
      columnsWithDefinedGroupIndex++;
    }
  });

  (0, _invariant2.default)(columnGroups.length === (columnGroupProps || []).length, 'column group data must fully and only contain every column groups');

  (0, _invariant2.default)(columnsWithDefinedGroupIndex === columnProps.length, 'group index if specified must be given for every column');

  (0, _forEach2.default)(columnProps, function (columnProp) {
    columnProp.fixed = columnGroupProps[columnProp.groupIdx].fixed;
    columnProp.fixedRight = columnGroupProps[columnProp.groupIdx].fixedRight;
  });
}

/**
 * Uses columnData to extract column props and cell rendering templates
 *
 * @param {!Array.<columnDefinition>} columnData
 * @param {!Array.<columnDefinition>} columnGroupData
 * @return {{
 *   columnGroupProps: !Array.<columnDefinition>,
 *   columnProps: !Array.<columnDefinition>,
 *   elementTemplates: !Object.<string, Array>,
 *   useGroupHeader: boolean,
 * }}
 */
function getColumnPropsFromData(columnData, columnGroupData) {
  var columnProps = (0, _convertColumnElementsToData.extractPropsFromData)(columnData);
  var columnGroupProps = (0, _convertColumnElementsToData.extractPropsFromData)(columnGroupData);

  var elementTemplates = (0, _convertColumnElementsToData.extractTemplatesFromData)(columnData, columnGroupData);

  fixColumnPropsWithColumnGroupProps(columnProps, columnGroupProps);

  return {
    columnGroupProps: columnGroupProps,
    columnProps: columnProps,
    elementTemplates: elementTemplates,
    useGroupHeader: columnGroupProps.length > 0
  };
}

function getColumnData(allowColumnVirtualization, columnData, columnGroupData, childComponents) {
  // use columnData to directly get the column data
  if (allowColumnVirtualization) {
    return getColumnPropsFromData(columnData, columnGroupData);
  }

  // use legacy API (React Children) to get the column data
  return convertColumnElementsToData(childComponents);
}

exports.default = (0, _shallowEqualSelector2.default)([function (props) {
  return props.allowColumnVirtualization;
}, function (props) {
  return props.columnData;
}, function (props) {
  return props.columnGroupData;
}, function (props) {
  return props.children;
}], getColumnData);