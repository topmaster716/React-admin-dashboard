/**
 * Copyright Schrodinger, LLC
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule updateColumnWidth
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateColumnWidth = exports.updateColumnGroupWidth = undefined;

var _columnWidths3 = require('./columnWidths');

var _columnWidths4 = _interopRequireDefault(_columnWidths3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Update our cached col width for a specific index
 *
 * NOTE (jordan) This alters state so it shouldn't be called
 * without state having been cloned first.
 *
 * @param {!Object} state
 * @param {number} columnIdx
 * @return {number} The new col width
 */
function updateColumnWidth(state, columnIdx) {
  var _columnWidths = (0, _columnWidths4.default)(state),
      scrollableColumns = _columnWidths.scrollableColumns;

  var columnOffsetIntervalTree = state.columnOffsetIntervalTree;

  var newWidth = scrollableColumns[columnIdx].width;
  var oldWidth = columnOffsetIntervalTree.get(columnIdx);
  if (newWidth !== oldWidth) {
    columnOffsetIntervalTree.set(columnIdx, newWidth);
  }

  return newWidth;
}

/**
 * Update our cached col group width for a specific index
 *
 * NOTE (jordan) This alters state so it shouldn't be called
 * without state having been cloned first.
 *
 * @param {!Object} state
 * @param {number} columnIdx
 * @return {number} The new col width
 */
function updateColumnGroupWidth(state, columnIdx) {
  var _columnWidths2 = (0, _columnWidths4.default)(state),
      columnGroupProps = _columnWidths2.columnGroupProps,
      scrollableColumnGroupIndex = _columnWidths2.scrollableColumnGroupIndex;

  var columnGroupOffsetIntervalTree = state.columnGroupOffsetIntervalTree;


  var newWidth = columnGroupProps[scrollableColumnGroupIndex[columnIdx]].width;
  var oldWidth = columnGroupOffsetIntervalTree.get(columnIdx);

  if (newWidth !== oldWidth) {
    columnGroupOffsetIntervalTree.set(columnIdx, newWidth);
  }

  return newWidth;
}

exports.updateColumnGroupWidth = updateColumnGroupWidth;
exports.updateColumnWidth = updateColumnWidth;