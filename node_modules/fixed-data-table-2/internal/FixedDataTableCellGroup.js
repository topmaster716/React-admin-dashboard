/**
 * Copyright Schrodinger, LLC
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FixedDataTableCellGroup
 * @typechecks
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _FixedDataTableHelper = _interopRequireDefault(require('./FixedDataTableHelper'));

var _react = _interopRequireDefault(require('react'));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _FixedDataTableCell = _interopRequireDefault(require('./FixedDataTableCell'));

var _cx = _interopRequireDefault(require('./cx'));

var _FixedDataTableTranslateDOMPosition = _interopRequireDefault(require('./FixedDataTableTranslateDOMPosition'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var DIR_SIGN = _FixedDataTableHelper["default"].DIR_SIGN;
var FixedDataTableCellGroupImpl = (0, _createReactClass["default"])({
  displayName: 'FixedDataTableCellGroupImpl',

  /**
   * PropTypes are disabled in this component, because having them on slows
   * down the FixedDataTable hugely in DEV mode. You can enable them back for
   * development, but please don't commit this component with enabled propTypes.
   */
  propTypes_DISABLED_FOR_PERFORMANCE: {
    /**
     * Array of <FixedDataTableColumn />.
     */
    columns: _propTypes["default"].array.isRequired,
    isScrolling: _propTypes["default"].bool,
    left: _propTypes["default"].number,
    onColumnResize: _propTypes["default"].func,
    onColumnReorder: _propTypes["default"].func,
    onColumnReorderMove: _propTypes["default"].func,
    onColumnReorderEnd: _propTypes["default"].func,
    height: _propTypes["default"].number.isRequired,

    /**
     * Height of fixedDataTableCellGroupLayout/cellGroupWrapper.
     */
    cellGroupWrapperHeight: _propTypes["default"].number,
    rowHeight: _propTypes["default"].number.isRequired,
    rowIndex: _propTypes["default"].number.isRequired,
    width: _propTypes["default"].number.isRequired,
    zIndex: _propTypes["default"].number.isRequired,
    touchEnabled: _propTypes["default"].bool,
    isHeaderOrFooter: _propTypes["default"].bool
  },
  componentWillMount: function componentWillMount() {
    this._initialRender = true;
  },
  componentDidMount: function componentDidMount() {
    this._initialRender = false;
  },
  render: function render()
  /*object*/
  {
    var props = this.props;
    var columns = props.columns;
    var cells = new Array(columns.length);

    var contentWidth = this._getColumnsWidth(columns);

    var isColumnReordering = props.isColumnReordering && columns.reduce(function (acc, column) {
      return acc || props.columnReorderingData.columnKey === column.props.columnKey;
    }, false);
    var currentPosition = 0;

    for (var i = 0, j = columns.length; i < j; i++) {
      var columnProps = columns[i].props;
      var recycable = columnProps.allowCellsRecycling && !isColumnReordering;

      if (!recycable || currentPosition - props.left <= props.width && currentPosition - props.left + columnProps.width >= 0) {
        var key = columnProps.columnKey || 'cell_' + i;
        cells[i] = this._renderCell(props.rowIndex, props.rowHeight, columnProps, currentPosition, key, contentWidth, isColumnReordering);
      }

      currentPosition += columnProps.width;
    }

    var style = {
      height: props.height,
      position: 'absolute',
      width: contentWidth,
      zIndex: props.zIndex
    };
    (0, _FixedDataTableTranslateDOMPosition["default"])(style, -1 * DIR_SIGN * props.left, 0, this._initialRender);
    return _react["default"].createElement("div", {
      className: (0, _cx["default"])('fixedDataTableCellGroupLayout/cellGroup'),
      style: style
    }, cells);
  },
  _renderCell: function _renderCell(
  /*number*/
  rowIndex,
  /*number*/
  height,
  /*object*/
  columnProps,
  /*number*/
  left,
  /*string*/
  key,
  /*number*/
  columnGroupWidth,
  /*boolean*/
  isColumnReordering)
  /*object*/
  {
    var cellIsResizable = columnProps.isResizable && this.props.onColumnResize;
    var onColumnResize = cellIsResizable ? this.props.onColumnResize : null;
    var cellIsReorderable = columnProps.isReorderable && this.props.onColumnReorder && rowIndex === -1 && columnGroupWidth !== columnProps.width;
    var onColumnReorder = cellIsReorderable ? this.props.onColumnReorder : null;
    var className = columnProps.cellClassName;
    var pureRendering = columnProps.pureRendering || false;
    return _react["default"].createElement(_FixedDataTableCell["default"], {
      isScrolling: this.props.isScrolling,
      isHeaderOrFooter: this.props.isHeaderOrFooter,
      align: columnProps.align,
      className: className,
      height: height,
      key: key,
      maxWidth: columnProps.maxWidth,
      minWidth: columnProps.minWidth,
      touchEnabled: this.props.touchEnabled,
      onColumnResize: onColumnResize,
      onColumnReorder: onColumnReorder,
      onColumnReorderMove: this.props.onColumnReorderMove,
      onColumnReorderEnd: this.props.onColumnReorderEnd,
      isColumnReordering: isColumnReordering,
      columnReorderingData: this.props.columnReorderingData,
      rowIndex: rowIndex,
      columnKey: columnProps.columnKey,
      width: columnProps.width,
      left: left,
      cell: columnProps.cell,
      columnGroupWidth: columnGroupWidth,
      pureRendering: pureRendering
    });
  },
  _getColumnsWidth: function _getColumnsWidth(
  /*array*/
  columns)
  /*number*/
  {
    var width = 0;

    for (var i = 0; i < columns.length; ++i) {
      width += columns[i].props.width;
    }

    return width;
  }
});
var FixedDataTableCellGroup = (0, _createReactClass["default"])({
  displayName: 'FixedDataTableCellGroup',

  /**
   * PropTypes are disabled in this component, because having them on slows
   * down the FixedDataTable hugely in DEV mode. You can enable them back for
   * development, but please don't commit this component with enabled propTypes.
   */
  propTypes_DISABLED_FOR_PERFORMANCE: {
    isScrolling: _propTypes["default"].bool,

    /**
     * Height of the row.
     */
    height: _propTypes["default"].number.isRequired,
    offsetLeft: _propTypes["default"].number,
    left: _propTypes["default"].number,

    /**
     * Z-index on which the row will be displayed. Used e.g. for keeping
     * header and footer in front of other rows.
     */
    zIndex: _propTypes["default"].number.isRequired,
    isHeaderOrFooter: _propTypes["default"].bool
  },
  shouldComponentUpdate: function shouldComponentUpdate(
  /*object*/
  nextProps)
  /*boolean*/
  {
    return !nextProps.isScrolling || this.props.rowIndex !== nextProps.rowIndex || this.props.left !== nextProps.left;
  },
  getDefaultProps: function getDefaultProps()
  /*object*/
  {
    return {
      left: 0,
      offsetLeft: 0
    };
  },
  render: function render()
  /*object*/
  {
    var _this$props = this.props,
        offsetLeft = _this$props.offsetLeft,
        props = _objectWithoutProperties(_this$props, ["offsetLeft"]);

    var style = {
      height: props.cellGroupWrapperHeight || props.height,
      width: props.width
    };

    if (DIR_SIGN === 1) {
      style.left = offsetLeft;
    } else {
      style.right = offsetLeft;
    }

    var onColumnResize = props.onColumnResize ? this._onColumnResize : null;
    return _react["default"].createElement("div", {
      style: style,
      className: (0, _cx["default"])('fixedDataTableCellGroupLayout/cellGroupWrapper')
    }, _react["default"].createElement(FixedDataTableCellGroupImpl, _extends({}, props, {
      onColumnResize: onColumnResize
    })));
  },
  _onColumnResize: function _onColumnResize(
  /*number*/
  left,
  /*number*/
  width,
  /*?number*/
  minWidth,
  /*?number*/
  maxWidth,
  /*string|number*/
  columnKey,
  /*object*/
  event) {
    this.props.onColumnResize && this.props.onColumnResize(this.props.offsetLeft, left - this.props.left + width, width, minWidth, maxWidth, columnKey, event);
  }
});
var _default = FixedDataTableCellGroup;
exports["default"] = _default;