"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _DOMMouseMoveTracker = _interopRequireDefault(require('./DOMMouseMoveTracker'));

var _Locale = _interopRequireDefault(require('./Locale'));

var _react = _interopRequireDefault(require('react'));

var _createReactClass = _interopRequireDefault(require("create-react-class"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _ReactComponentWithPureRenderMixin = _interopRequireDefault(require('./ReactComponentWithPureRenderMixin'));

var _clamp = _interopRequireDefault(require('./clamp'));

var _cx = _interopRequireDefault(require('./cx'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Copyright Schrodinger, LLC
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * This is to be used with the FixedDataTable. It is a read line
 * that when you click on a column that is resizable appears and allows
 * you to resize the corresponding column.
 *
 * @providesModule FixedDataTableColumnResizeHandle
 * @typechecks
 */
var FixedDataTableColumnResizeHandle = (0, _createReactClass["default"])({
  displayName: 'FixedDataTableColumnResizeHandle',
  mixins: [_ReactComponentWithPureRenderMixin["default"]],
  propTypes: {
    visible: _propTypes["default"].bool.isRequired,

    /**
     * This is the height of the line
     */
    height: _propTypes["default"].number.isRequired,

    /**
     * Offset from left border of the table, please note
     * that the line is a border on diff. So this is really the
     * offset of the column itself.
     */
    leftOffset: _propTypes["default"].number.isRequired,

    /**
     * Height of the clickable region of the line.
     * This is assumed to be at the top of the line.
     */
    knobHeight: _propTypes["default"].number.isRequired,

    /**
     * The line is a border on a diff, so this is essentially
     * the width of column.
     */
    initialWidth: _propTypes["default"].number,

    /**
     * The minimum width this dragger will collapse to
     */
    minWidth: _propTypes["default"].number,

    /**
     * The maximum width this dragger will collapse to
     */
    maxWidth: _propTypes["default"].number,

    /**
     * Initial click event on the header cell.
     */
    initialEvent: _propTypes["default"].object,

    /**
     * When resizing is complete this is called.
     */
    onColumnResizeEnd: _propTypes["default"].func,

    /**
     * Column key for the column being resized.
     */
    columnKey: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

    /**
     * Whether the resize handle should respond to touch events or not.
     */
    touchEnabled: _propTypes["default"].bool
  },
  getInitialState: function getInitialState()
  /*object*/
  {
    return {
      width: 0,
      cursorDelta: 0
    };
  },
  componentWillReceiveProps: function componentWillReceiveProps(
  /*object*/
  newProps) {
    if (newProps.initialEvent && !this._mouseMoveTracker.isDragging()) {
      this._mouseMoveTracker.captureMouseMoves(newProps.initialEvent);

      this.setState({
        width: newProps.initialWidth,
        cursorDelta: newProps.initialWidth
      });
    }
  },
  componentDidMount: function componentDidMount() {
    this._mouseMoveTracker = new _DOMMouseMoveTracker["default"](this._onMove, this._onColumnResizeEnd, document.body, this.props.touchEnabled);
  },
  componentWillUnmount: function componentWillUnmount() {
    this._mouseMoveTracker.releaseMouseMoves();

    this._mouseMoveTracker = null;
  },
  render: function render()
  /*object*/
  {
    var style = {
      width: this.state.width,
      height: this.props.height
    };

    if (_Locale["default"].isRTL()) {
      style.right = this.props.leftOffset;
    } else {
      style.left = this.props.leftOffset;
    }

    return _react["default"].createElement("div", {
      className: (0, _cx["default"])({
        'fixedDataTableColumnResizerLineLayout/main': true,
        'fixedDataTableColumnResizerLineLayout/hiddenElem': !this.props.visible,
        'public/fixedDataTableColumnResizerLine/main': true
      }),
      style: style
    }, _react["default"].createElement("div", {
      className: (0, _cx["default"])('fixedDataTableColumnResizerLineLayout/mouseArea'),
      style: {
        height: this.props.height
      }
    }));
  },
  _onMove: function _onMove(
  /*number*/
  deltaX) {
    if (_Locale["default"].isRTL()) {
      deltaX = -deltaX;
    }

    var newWidth = this.state.cursorDelta + deltaX;
    var newColumnWidth = (0, _clamp["default"])(newWidth, this.props.minWidth, this.props.maxWidth); // Please note cursor delta is the different between the currently width
    // and the new width.

    this.setState({
      width: newColumnWidth,
      cursorDelta: newWidth
    });
  },
  _onColumnResizeEnd: function _onColumnResizeEnd() {
    this._mouseMoveTracker.releaseMouseMoves();

    this.props.onColumnResizeEnd(this.state.width, this.props.columnKey);
  }
});
var _default = FixedDataTableColumnResizeHandle;
exports["default"] = _default;