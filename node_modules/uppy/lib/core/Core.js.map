{"version":3,"sources":["../../src/core/Core.js"],"names":["Utils","require","Translator","UppySocket","ee","cuid","throttle","prettyBytes","match","Uppy","opts","defaultLocale","strings","youCanOnlyUploadX","youHaveToAtLeastSelectX","exceedsSize","youCanOnlyUploadFileTypes","uppyServerError","defaultOptions","autoProceed","debug","restrictions","maxFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","onBeforeFileAdded","currentFile","files","Promise","resolve","onBeforeUpload","done","locale","translator","i18n","translate","bind","plugins","getState","updateMeta","initSocket","log","addFile","calculateProgress","resetProgress","emitter","on","off","once","emit","preProcessors","uploaders","postProcessors","state","capabilities","resumableUploads","totalProgress","meta","info","isHidden","type","msg","updateNum","global","UppyState","uppyLog","_uppy","updateAll","Object","keys","forEach","pluginType","plugin","update","setState","stateUpdate","newState","reset","defaultProgress","percentage","bytesUploaded","uploadComplete","uploadStarted","updatedFiles","updatedFile","fileID","progress","console","addPreProcessor","fn","push","removePreProcessor","i","indexOf","splice","addPostProcessor","removePostProcessor","addUploader","removeUploader","setMeta","data","newMeta","checkRestrictions","checkMinNumberOfFiles","file","fileType","length","smart_count","isCorrectFileType","filter","join","allowedFileTypesString","size","catch","err","reject","then","getFileType","fileName","name","fileExtension","getFileNameAndExtension","isRemote","generateFileID","fileTypeGeneral","fileTypeSpecific","newFile","source","id","extension","general","specific","bytesTotal","remote","preview","isPreviewSupported","getThumbnail","isFileAllowed","scheduledAutoProceed","setTimeout","upload","error","stack","message","getFile","removeFile","calculateTotalProgress","Math","floor","toFixed","inProgress","progressMax","progressAll","actions","Date","now","throttledCalculateProgress","leading","trailing","uploadResp","uploadURL","completeFiles","preprocess","postprocess","window","addEventListener","isOnline","status","online","navigator","onLine","wasOffline","use","Plugin","pluginName","Error","existsPluginAlready","getPlugin","install","foundPlugin","iteratePlugins","method","removePlugin","instance","list","uninstall","index","close","socket","duration","clearTimeout","infoTimeoutID","undefined","newInformer","hideInfo","newInfo","core","dir","run","restore","uploadID","currentUploads","removeUpload","runUpload","createUpload","fileIDs","step","uploadData","restoreStep","steps","lastStep","currentUpload","forceUpload","isMinNumberOfFilesReached","waitingFileIDs","module","exports"],"mappings":"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","file":"Core.js","sourcesContent":["const Utils = require('../core/Utils')\nconst Translator = require('../core/Translator')\nconst UppySocket = require('./UppySocket')\nconst ee = require('namespace-emitter')\nconst cuid = require('cuid')\nconst throttle = require('lodash.throttle')\nconst prettyBytes = require('prettier-bytes')\nconst match = require('mime-match')\n// const en_US = require('../locales/en_US')\n// const deepFreeze = require('deep-freeze-strict')\n\n/**\n * Main Uppy core\n *\n * @param {object} opts general options, like locales, to show modal or not to show\n */\nclass Uppy {\n  constructor (opts) {\n    const defaultLocale = {\n      strings: {\n        youCanOnlyUploadX: {\n          0: 'You can only upload %{smart_count} file',\n          1: 'You can only upload %{smart_count} files'\n        },\n        youHaveToAtLeastSelectX: {\n          0: 'You have to select at least %{smart_count} file',\n          1: 'You have to select at least %{smart_count} files'\n        },\n        exceedsSize: 'This file exceeds maximum allowed size of',\n        youCanOnlyUploadFileTypes: 'You can only upload:',\n        uppyServerError: 'Connection with Uppy server failed'\n      }\n    }\n\n    // set default options\n    const defaultOptions = {\n      autoProceed: true,\n      debug: false,\n      restrictions: {\n        maxFileSize: false,\n        maxNumberOfFiles: false,\n        minNumberOfFiles: false,\n        allowedFileTypes: false\n      },\n      onBeforeFileAdded: (currentFile, files) => Promise.resolve(),\n      onBeforeUpload: (files, done) => Promise.resolve(),\n      locale: defaultLocale\n    }\n\n    // Merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    // // Dictates in what order different plugin types are ran:\n    // this.types = [ 'presetter', 'orchestrator', 'progressindicator',\n    //                 'acquirer', 'modifier', 'uploader', 'presenter', 'debugger']\n\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    // i18n\n    this.translator = new Translator({locale: this.locale})\n    this.i18n = this.translator.translate.bind(this.translator)\n\n    // Container for different types of plugins\n    this.plugins = {}\n\n    // @TODO maybe bindall\n    this.translator = new Translator({locale: this.opts.locale})\n    this.i18n = this.translator.translate.bind(this.translator)\n    this.getState = this.getState.bind(this)\n    this.updateMeta = this.updateMeta.bind(this)\n    this.initSocket = this.initSocket.bind(this)\n    this.log = this.log.bind(this)\n    this.addFile = this.addFile.bind(this)\n    this.calculateProgress = this.calculateProgress.bind(this)\n    this.resetProgress = this.resetProgress.bind(this)\n\n    // this.bus = this.emitter = ee()\n    this.emitter = ee()\n    this.on = this.emitter.on.bind(this.emitter)\n    this.off = this.emitter.off.bind(this.emitter)\n    this.once = this.emitter.once.bind(this.emitter)\n    this.emit = this.emitter.emit.bind(this.emitter)\n\n    this.preProcessors = []\n    this.uploaders = []\n    this.postProcessors = []\n\n    this.state = {\n      files: {},\n      capabilities: {\n        resumableUploads: false\n      },\n      totalProgress: 0,\n      meta: Object.assign({}, this.opts.meta),\n      info: {\n        isHidden: true,\n        type: '',\n        msg: ''\n      }\n    }\n\n    // for debugging and testing\n    this.updateNum = 0\n    if (this.opts.debug) {\n      global.UppyState = this.state\n      global.uppyLog = ''\n      // global.UppyAddFile = this.addFile.bind(this)\n      global._uppy = this\n    }\n  }\n\n  /**\n   * Iterate on all plugins and run `update` on them. Called each time state changes\n   *\n   */\n  updateAll (state) {\n    Object.keys(this.plugins).forEach((pluginType) => {\n      this.plugins[pluginType].forEach((plugin) => {\n        plugin.update(state)\n      })\n    })\n  }\n\n  /**\n   * Updates state\n   *\n   * @param {newState} object\n   */\n  setState (stateUpdate) {\n    const newState = Object.assign({}, this.state, stateUpdate)\n    this.emit('core:state-update', this.state, newState, stateUpdate)\n\n    this.state = newState\n    this.updateAll(this.state)\n  }\n\n  /**\n   * Returns current state\n   *\n   */\n  getState () {\n    // use deepFreeze for debugging\n    // return deepFreeze(this.state)\n    return this.state\n  }\n\n  reset () {\n    this.emit('core:pause-all')\n    this.emit('core:cancel-all')\n    this.setState({\n      totalProgress: 0\n    })\n  }\n\n  resetProgress () {\n    const defaultProgress = {\n      percentage: 0,\n      bytesUploaded: 0,\n      uploadComplete: false,\n      uploadStarted: false\n    }\n    const files = Object.assign({}, this.state.files)\n    const updatedFiles = {}\n    Object.keys(files).forEach(fileID => {\n      const updatedFile = Object.assign({}, files[fileID])\n      updatedFile.progress = Object.assign({}, updatedFile.progress, defaultProgress)\n      updatedFiles[fileID] = updatedFile\n    })\n    console.log(updatedFiles)\n    this.setState({\n      files: updatedFiles,\n      totalProgress: 0\n    })\n  }\n\n  addPreProcessor (fn) {\n    this.preProcessors.push(fn)\n  }\n\n  removePreProcessor (fn) {\n    const i = this.preProcessors.indexOf(fn)\n    if (i !== -1) {\n      this.preProcessors.splice(i, 1)\n    }\n  }\n\n  addPostProcessor (fn) {\n    this.postProcessors.push(fn)\n  }\n\n  removePostProcessor (fn) {\n    const i = this.postProcessors.indexOf(fn)\n    if (i !== -1) {\n      this.postProcessors.splice(i, 1)\n    }\n  }\n\n  addUploader (fn) {\n    this.uploaders.push(fn)\n  }\n\n  removeUploader (fn) {\n    const i = this.uploaders.indexOf(fn)\n    if (i !== -1) {\n      this.uploaders.splice(i, 1)\n    }\n  }\n\n  setMeta (data) {\n    const newMeta = Object.assign({}, this.getState().meta, data)\n    this.log('Adding metadata:')\n    this.log(data)\n    this.setState({meta: newMeta})\n  }\n\n  updateMeta (data, fileID) {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    const newMeta = Object.assign({}, updatedFiles[fileID].meta, data)\n    updatedFiles[fileID] = Object.assign({}, updatedFiles[fileID], {\n      meta: newMeta\n    })\n    this.setState({files: updatedFiles})\n  }\n\n  checkRestrictions (checkMinNumberOfFiles, file, fileType) {\n    const {maxFileSize, maxNumberOfFiles, minNumberOfFiles, allowedFileTypes} = this.opts.restrictions\n\n    if (checkMinNumberOfFiles && minNumberOfFiles) {\n      if (Object.keys(this.state.files).length < minNumberOfFiles) {\n        this.info(`${this.i18n('youHaveToAtLeastSelectX', {smart_count: minNumberOfFiles})}`, 'error', 5000)\n        return false\n      }\n      return true\n    }\n\n    if (maxNumberOfFiles) {\n      if (Object.keys(this.state.files).length + 1 > maxNumberOfFiles) {\n        this.info(`${this.i18n('youCanOnlyUploadX', {smart_count: maxNumberOfFiles})}`, 'error', 5000)\n        return false\n      }\n    }\n\n    if (allowedFileTypes) {\n      const isCorrectFileType = allowedFileTypes.filter(match(fileType.join('/'))).length > 0\n      if (!isCorrectFileType) {\n        const allowedFileTypesString = allowedFileTypes.join(', ')\n        this.info(`${this.i18n('youCanOnlyUploadFileTypes')} ${allowedFileTypesString}`, 'error', 5000)\n        return false\n      }\n    }\n\n    if (maxFileSize) {\n      if (file.data.size > maxFileSize) {\n        this.info(`${this.i18n('exceedsSize')} ${prettyBytes(maxFileSize)}`, 'error', 5000)\n        return false\n      }\n    }\n\n    return true\n  }\n\n  addFile (file) {\n    return this.opts.onBeforeFileAdded(file, this.getState().files).catch((err) => {\n      this.info(err, 'error', 5000)\n      return Promise.reject(`onBeforeFileAdded: ${err}`)\n    }).then(() => {\n      return Utils.getFileType(file).then((fileType) => {\n        const updatedFiles = Object.assign({}, this.state.files)\n        const fileName = file.name || 'noname'\n        const fileExtension = Utils.getFileNameAndExtension(fileName)[1]\n        const isRemote = file.isRemote || false\n\n        const fileID = Utils.generateFileID(file)\n        const fileTypeGeneral = fileType[0]\n        const fileTypeSpecific = fileType[1]\n\n        const newFile = {\n          source: file.source || '',\n          id: fileID,\n          name: fileName,\n          extension: fileExtension || '',\n          meta: Object.assign({}, { name: fileName }, this.getState().meta),\n          type: {\n            general: fileTypeGeneral,\n            specific: fileTypeSpecific\n          },\n          data: file.data,\n          progress: {\n            percentage: 0,\n            bytesUploaded: 0,\n            bytesTotal: file.data.size || 0,\n            uploadComplete: false,\n            uploadStarted: false\n          },\n          size: file.data.size || 'N/A',\n          isRemote: isRemote,\n          remote: file.remote || '',\n          preview: file.preview\n        }\n\n        if (Utils.isPreviewSupported(fileTypeSpecific) && !isRemote) {\n          newFile.preview = Utils.getThumbnail(file.data)\n        }\n\n        const isFileAllowed = this.checkRestrictions(false, newFile, fileType)\n        if (!isFileAllowed) return Promise.reject('File not allowed')\n\n        updatedFiles[fileID] = newFile\n        this.setState({files: updatedFiles})\n\n        this.emit('core:file-added', newFile)\n        this.log(`Added file: ${fileName}, ${fileID}, mime type: ${fileType}`)\n\n        if (this.opts.autoProceed && !this.scheduledAutoProceed) {\n          this.scheduledAutoProceed = setTimeout(() => {\n            this.scheduledAutoProceed = null\n            this.upload().catch((err) => {\n              console.error(err.stack || err.message || err)\n            })\n          }, 4)\n        }\n      })\n    })\n  }\n\n  /**\n   * Get a file object.\n   *\n   * @param {string} fileID The ID of the file object to return.\n   */\n  getFile (fileID) {\n    return this.getState().files[fileID]\n  }\n\n  removeFile (fileID) {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    delete updatedFiles[fileID]\n    this.setState({files: updatedFiles})\n    this.calculateTotalProgress()\n    this.emit('core:file-removed', fileID)\n    this.log(`Removed file: ${fileID}`)\n  }\n\n  calculateProgress (data) {\n    const fileID = data.id\n    const updatedFiles = Object.assign({}, this.getState().files)\n\n    // skip progress event for a file that’s been removed\n    if (!updatedFiles[fileID]) {\n      this.log('Trying to set progress for a file that’s not with us anymore: ', fileID)\n      return\n    }\n\n    const updatedFile = Object.assign({}, updatedFiles[fileID],\n      Object.assign({}, {\n        progress: Object.assign({}, updatedFiles[fileID].progress, {\n          bytesUploaded: data.bytesUploaded,\n          bytesTotal: data.bytesTotal,\n          percentage: Math.floor((data.bytesUploaded / data.bytesTotal * 100).toFixed(2))\n        })\n      }\n    ))\n    updatedFiles[data.id] = updatedFile\n\n    this.setState({\n      files: updatedFiles\n    })\n\n    this.calculateTotalProgress()\n  }\n\n  calculateTotalProgress () {\n    // calculate total progress, using the number of files currently uploading,\n    // multiplied by 100 and the summ of individual progress of each file\n    const files = Object.assign({}, this.getState().files)\n\n    const inProgress = Object.keys(files).filter((file) => {\n      return files[file].progress.uploadStarted\n    })\n    const progressMax = inProgress.length * 100\n    let progressAll = 0\n    inProgress.forEach((file) => {\n      progressAll = progressAll + files[file].progress.percentage\n    })\n\n    const totalProgress = Math.floor((progressAll * 100 / progressMax).toFixed(2))\n\n    this.setState({\n      totalProgress: totalProgress\n    })\n  }\n\n  /**\n   * Registers listeners for all global actions, like:\n   * `file-add`, `file-remove`, `upload-progress`, `reset`\n   *\n   */\n  actions () {\n    // this.bus.on('*', (payload) => {\n    //   console.log('emitted: ', this.event)\n    //   console.log('with payload: ', payload)\n    // })\n\n    // stress-test re-rendering\n    // setInterval(() => {\n    //   this.setState({bla: 'bla'})\n    // }, 20)\n\n    this.on('core:error', (error) => {\n      this.setState({ error })\n    })\n\n    this.on('core:upload', () => {\n      this.setState({ error: null })\n    })\n\n    this.on('core:file-add', (data) => {\n      this.addFile(data)\n    })\n\n    // `remove-file` removes a file from `state.files`, for example when\n    // a user decides not to upload particular file and clicks a button to remove it\n    this.on('core:file-remove', (fileID) => {\n      this.removeFile(fileID)\n    })\n\n    this.on('core:cancel-all', () => {\n      // let updatedFiles = this.getState().files\n      // updatedFiles = {}\n      this.setState({files: {}})\n    })\n\n    this.on('core:upload-started', (fileID, upload) => {\n      const updatedFiles = Object.assign({}, this.getState().files)\n      const updatedFile = Object.assign({}, updatedFiles[fileID],\n        Object.assign({}, {\n          progress: Object.assign({}, updatedFiles[fileID].progress, {\n            uploadStarted: Date.now()\n          })\n        }\n      ))\n      updatedFiles[fileID] = updatedFile\n\n      this.setState({files: updatedFiles})\n    })\n\n    // upload progress events can occur frequently, especially when you have a good\n    // connection to the remote server. Therefore, we are throtteling them to\n    // prevent accessive function calls.\n    // see also: https://github.com/tus/tus-js-client/commit/9940f27b2361fd7e10ba58b09b60d82422183bbb\n    const throttledCalculateProgress = throttle(this.calculateProgress, 100, {leading: true, trailing: false})\n\n    this.on('core:upload-progress', (data) => {\n      // this.calculateProgress(data)\n      throttledCalculateProgress(data)\n    })\n\n    this.on('core:upload-success', (fileID, uploadResp, uploadURL) => {\n      const updatedFiles = Object.assign({}, this.getState().files)\n      const updatedFile = Object.assign({}, updatedFiles[fileID], {\n        progress: Object.assign({}, updatedFiles[fileID].progress, {\n          uploadComplete: true,\n          // good or bad idea? setting the percentage to 100 if upload is successful,\n          // so that if we lost some progress events on the way, its still marked “compete”?\n          percentage: 100\n        }),\n        uploadURL: uploadURL\n      })\n      updatedFiles[fileID] = updatedFile\n\n      this.setState({\n        files: updatedFiles\n      })\n\n      this.calculateTotalProgress()\n\n      if (this.getState().totalProgress === 100) {\n        const completeFiles = Object.keys(updatedFiles).filter((file) => {\n          return updatedFiles[file].progress.uploadComplete\n        })\n        this.emit('core:upload-complete', completeFiles.length)\n      }\n    })\n\n    this.on('core:update-meta', (data, fileID) => {\n      this.updateMeta(data, fileID)\n    })\n\n    this.on('core:preprocess-progress', (fileID, progress) => {\n      const files = Object.assign({}, this.getState().files)\n      files[fileID] = Object.assign({}, files[fileID], {\n        progress: Object.assign({}, files[fileID].progress, {\n          preprocess: progress\n        })\n      })\n\n      this.setState({ files: files })\n    })\n    this.on('core:preprocess-complete', (fileID) => {\n      const files = Object.assign({}, this.getState().files)\n      files[fileID] = Object.assign({}, files[fileID], {\n        progress: Object.assign({}, files[fileID].progress)\n      })\n      delete files[fileID].progress.preprocess\n\n      this.setState({ files: files })\n    })\n    this.on('core:postprocess-progress', (fileID, progress) => {\n      const files = Object.assign({}, this.getState().files)\n      files[fileID] = Object.assign({}, files[fileID], {\n        progress: Object.assign({}, files[fileID].progress, {\n          postprocess: progress\n        })\n      })\n\n      this.setState({ files: files })\n    })\n    this.on('core:postprocess-complete', (fileID) => {\n      const files = Object.assign({}, this.getState().files)\n      files[fileID] = Object.assign({}, files[fileID], {\n        progress: Object.assign({}, files[fileID].progress)\n      })\n      delete files[fileID].progress.postprocess\n      // TODO should we set some kind of `fullyComplete` property on the file object\n      // so it's easier to see that the file is upload…fully complete…rather than\n      // what we have to do now (`uploadComplete && !postprocess`)\n\n      this.setState({ files: files })\n    })\n\n    // show informer if offline\n    if (typeof window !== 'undefined') {\n      window.addEventListener('online', () => this.isOnline(true))\n      window.addEventListener('offline', () => this.isOnline(false))\n      setTimeout(() => this.isOnline(), 3000)\n    }\n  }\n\n  isOnline (status) {\n    const online = status || window.navigator.onLine\n    if (!online) {\n      this.emit('is-offline')\n      this.info('No internet connection', 'error', 0)\n      this.wasOffline = true\n    } else {\n      this.emit('is-online')\n      if (this.wasOffline) {\n        this.emit('back-online')\n        this.info('Connected!', 'success', 3000)\n        this.wasOffline = false\n      }\n    }\n  }\n\n/**\n * Registers a plugin with Core\n *\n * @param {Class} Plugin object\n * @param {Object} options object that will be passed to Plugin later\n * @return {Object} self for chaining\n */\n  use (Plugin, opts) {\n    // Instantiate\n    const plugin = new Plugin(this, opts)\n    const pluginName = plugin.id\n    this.plugins[plugin.type] = this.plugins[plugin.type] || []\n\n    if (!pluginName) {\n      throw new Error('Your plugin must have a name')\n    }\n\n    if (!plugin.type) {\n      throw new Error('Your plugin must have a type')\n    }\n\n    let existsPluginAlready = this.getPlugin(pluginName)\n    if (existsPluginAlready) {\n      let msg = `Already found a plugin named '${existsPluginAlready.name}'.\n        Tried to use: '${pluginName}'.\n        Uppy is currently limited to running one of every plugin.\n        Share your use case with us over at\n        https://github.com/transloadit/uppy/issues/\n        if you want us to reconsider.`\n      throw new Error(msg)\n    }\n\n    this.plugins[plugin.type].push(plugin)\n    plugin.install()\n\n    return this\n  }\n\n/**\n * Find one Plugin by name\n *\n * @param string name description\n */\n  getPlugin (name) {\n    let foundPlugin = false\n    this.iteratePlugins((plugin) => {\n      const pluginName = plugin.id\n      if (pluginName === name) {\n        foundPlugin = plugin\n        return false\n      }\n    })\n    return foundPlugin\n  }\n\n/**\n * Iterate through all `use`d plugins\n *\n * @param function method description\n */\n  iteratePlugins (method) {\n    Object.keys(this.plugins).forEach((pluginType) => {\n      this.plugins[pluginType].forEach(method)\n    })\n  }\n\n  /**\n   * Uninstall and remove a plugin.\n   *\n   * @param {Plugin} instance The plugin instance to remove.\n   */\n  removePlugin (instance) {\n    const list = this.plugins[instance.type]\n\n    if (instance.uninstall) {\n      instance.uninstall()\n    }\n\n    const index = list.indexOf(instance)\n    if (index !== -1) {\n      list.splice(index, 1)\n    }\n  }\n\n  /**\n   * Uninstall all plugins and close down this Uppy instance.\n   */\n  close () {\n    this.reset()\n\n    this.iteratePlugins((plugin) => {\n      plugin.uninstall()\n    })\n\n    if (this.socket) {\n      this.socket.close()\n    }\n  }\n\n  /**\n  * Set info message in `state.info`, so that UI plugins like `Informer`\n  * can display the message\n  *\n  * @param {string} msg Message to be displayed by the informer\n  */\n\n  info (msg, type, duration) {\n    this.setState({\n      info: {\n        isHidden: false,\n        type: type,\n        msg: msg\n      }\n    })\n\n    this.emit('core:info-visible')\n\n    window.clearTimeout(this.infoTimeoutID)\n    if (duration === 0) {\n      this.infoTimeoutID = undefined\n      return\n    }\n\n    // hide the informer after `duration` milliseconds\n    this.infoTimeoutID = setTimeout(() => {\n      const newInformer = Object.assign({}, this.state.info, {\n        isHidden: true\n      })\n      this.setState({\n        info: newInformer\n      })\n      this.emit('core:info-hidden')\n    }, duration)\n  }\n\n  hideInfo () {\n    const newInfo = Object.assign({}, this.core.state.info, {\n      isHidden: true\n    })\n    this.setState({\n      info: newInfo\n    })\n    this.emit('core:info-hidden')\n  }\n\n  /**\n   * Logs stuff to console, only if `debug` is set to true. Silent in production.\n   *\n   * @return {String|Object} to log\n   */\n  log (msg, type) {\n    if (!this.opts.debug) {\n      return\n    }\n\n    if (type === 'error') {\n      console.error(`LOG: ${msg}`)\n      return\n    }\n\n    if (msg === `${msg}`) {\n      console.log(`LOG: ${msg}`)\n    } else {\n      console.dir(msg)\n    }\n\n    global.uppyLog = global.uppyLog + '\\n' + 'DEBUG LOG: ' + msg\n  }\n\n  initSocket (opts) {\n    if (!this.socket) {\n      this.socket = new UppySocket(opts)\n    }\n\n    return this.socket\n  }\n\n/**\n * Initializes actions, installs all plugins (by iterating on them and calling `install`), sets options\n *\n */\n  run () {\n    this.log('Core is run, initializing actions...')\n\n    this.actions()\n\n    // Forse set `autoProceed` option to false if there are multiple selector Plugins active\n    // if (this.plugins.acquirer && this.plugins.acquirer.length > 1) {\n    //   this.opts.autoProceed = false\n    // }\n\n    // Install all plugins\n    // this.installAll()\n\n    return this\n  }\n\n  /**\n   * Restore an upload by its ID.\n   */\n  restore (uploadID) {\n    this.log(`Core: attempting to restore upload \"${uploadID}\"`)\n\n    if (!this.state.currentUploads[uploadID]) {\n      this.removeUpload(uploadID)\n      return Promise.reject(new Error('Nonexistent upload'))\n    }\n\n    return this.runUpload(uploadID)\n  }\n\n  /**\n   * Create an upload for a bunch of files.\n   *\n   * @param {Array<string>} fileIDs File IDs to include in this upload.\n   * @return {string} ID of this upload.\n   */\n  createUpload (fileIDs) {\n    const uploadID = cuid()\n\n    this.emit('core:upload', {\n      id: uploadID,\n      fileIDs: fileIDs\n    })\n\n    this.setState({\n      currentUploads: Object.assign({}, this.state.currentUploads, {\n        [uploadID]: {\n          fileIDs: fileIDs,\n          step: 0\n        }\n      })\n    })\n\n    return uploadID\n  }\n\n  /**\n   * Remove an upload, eg. if it has been canceled or completed.\n   *\n   * @param {string} uploadID The ID of the upload.\n   */\n  removeUpload (uploadID) {\n    const currentUploads = Object.assign({}, this.state.currentUploads)\n    delete currentUploads[uploadID]\n\n    this.setState({\n      currentUploads: currentUploads\n    })\n  }\n\n  /**\n   * Run an upload. This picks up where it left off in case the upload is being restored.\n   *\n   * @private\n   */\n  runUpload (uploadID) {\n    const uploadData = this.state.currentUploads[uploadID]\n    const fileIDs = uploadData.fileIDs\n    const restoreStep = uploadData.step\n\n    const steps = [\n      ...this.preProcessors,\n      ...this.uploaders,\n      ...this.postProcessors\n    ]\n    let lastStep = Promise.resolve()\n    steps.forEach((fn, step) => {\n      // Skip this step if we are restoring and have already completed this step before.\n      if (step < restoreStep) {\n        return\n      }\n\n      lastStep = lastStep.then(() => {\n        const currentUpload = Object.assign({}, this.state.currentUploads[uploadID], {\n          step: step\n        })\n        this.setState({\n          currentUploads: Object.assign({}, this.state.currentUploads, {\n            [uploadID]: currentUpload\n          })\n        })\n        return fn(fileIDs)\n      })\n    })\n\n    // Not returning the `catch`ed promise, because we still want to return a rejected\n    // promise from this method if the upload failed.\n    lastStep.catch((err) => {\n      this.emit('core:error', err)\n\n      this.removeUpload(uploadID)\n    })\n\n    return lastStep.then(() => {\n      // return number of uploaded files\n      this.emit('core:success', fileIDs)\n\n      this.removeUpload(uploadID)\n    })\n  }\n\n    /**\n   * Start an upload for all the files that are not currently being uploaded.\n   *\n   * @return {Promise}\n   */\n  upload (forceUpload) {\n    const isMinNumberOfFilesReached = this.checkRestrictions(true)\n    if (!isMinNumberOfFilesReached) {\n      return Promise.reject('Minimum number of files has not been reached')\n    }\n\n    return this.opts.onBeforeUpload(this.state.files).catch((err) => {\n      this.info(err, 'error', 5000)\n      return Promise.reject(`onBeforeUpload: ${err}`)\n    }).then(() => {\n      const waitingFileIDs = []\n      Object.keys(this.state.files).forEach((fileID) => {\n        const file = this.getFile(fileID)\n\n        // TODO: replace files[file].isRemote with some logic\n        //\n        // filter files that are now yet being uploaded / haven’t been uploaded\n        // and remote too\n\n        if (forceUpload) {\n          this.resetProgress()\n          waitingFileIDs.push(file.id)\n        } else if (!file.progress.uploadStarted || file.isRemote) {\n          waitingFileIDs.push(file.id)\n        }\n      })\n\n      const uploadID = this.createUpload(waitingFileIDs)\n      return this.runUpload(uploadID)\n    })\n  }\n}\n\nmodule.exports = function (opts) {\n  if (!(this instanceof Uppy)) {\n    return new Uppy(opts)\n  }\n}\n"]}