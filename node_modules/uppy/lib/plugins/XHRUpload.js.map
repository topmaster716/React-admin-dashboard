{"version":3,"sources":["../../src/plugins/XHRUpload.js"],"names":["Plugin","require","UppySocket","Utils","module","exports","core","opts","type","id","title","defaultOptions","formData","fieldName","method","metaFields","responseUrlFieldName","bundle","headers","getResponseData","xhr","JSON","parse","response","handleUpload","bind","createFormDataUpload","file","formPost","FormData","Array","isArray","Object","keys","meta","forEach","item","append","data","createBareUpload","upload","current","total","state","xhrUpload","log","resolve","reject","XMLHttpRequest","addEventListener","ev","lengthComputable","emit","uploader","bytesUploaded","loaded","bytesTotal","target","status","resp","uploadURL","name","open","toUpperCase","endpoint","header","setRequestHeader","send","on","fileID","abort","uploadRemote","fetch","remote","url","credentials","body","stringify","size","fieldname","then","res","statusText","json","token","host","getSocketHost","socket","progressData","emitSocketProgress","close","selectForUpload","files","i","parseInt","length","isRemote","fileIDs","Promise","map","getFile","once","install","addUploader","uninstall","removeUploader"],"mappings":"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","file":"XHRUpload.js","sourcesContent":["const Plugin = require('./Plugin')\nconst UppySocket = require('../core/UppySocket')\nconst Utils = require('../core/Utils')\n\nmodule.exports = class XHRUpload extends Plugin {\n  constructor (core, opts) {\n    super(core, opts)\n    this.type = 'uploader'\n    this.id = 'XHRUpload'\n    this.title = 'XHRUpload'\n\n    // Default options\n    const defaultOptions = {\n      formData: true,\n      fieldName: 'files[]',\n      method: 'post',\n      metaFields: null,\n      responseUrlFieldName: 'url',\n      bundle: true,\n      headers: {},\n      getResponseData (xhr) {\n        return JSON.parse(xhr.response)\n      }\n    }\n\n    // Merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.handleUpload = this.handleUpload.bind(this)\n  }\n\n  createFormDataUpload (file, opts) {\n    const formPost = new FormData()\n\n    const metaFields = Array.isArray(opts.metaFields)\n      ? opts.metaFields\n      // Send along all fields by default.\n      : Object.keys(file.meta)\n    metaFields.forEach((item) => {\n      formPost.append(item, file.meta[item])\n    })\n\n    formPost.append(opts.fieldName, file.data)\n\n    return formPost\n  }\n\n  createBareUpload (file, opts) {\n    return file.data\n  }\n\n  upload (file, current, total) {\n    const opts = Object.assign({},\n      this.opts,\n      this.core.state.xhrUpload || {},\n      file.xhrUpload || {}\n    )\n\n    this.core.log(`uploading ${current} of ${total}`)\n    return new Promise((resolve, reject) => {\n      const data = opts.formData\n        ? this.createFormDataUpload(file, opts)\n        : this.createBareUpload(file, opts)\n\n      const xhr = new XMLHttpRequest()\n\n      xhr.upload.addEventListener('progress', (ev) => {\n        if (ev.lengthComputable) {\n          this.core.emit('core:upload-progress', {\n            uploader: this,\n            id: file.id,\n            bytesUploaded: ev.loaded,\n            bytesTotal: ev.total\n          })\n        }\n      })\n\n      xhr.addEventListener('load', (ev) => {\n        if (ev.target.status >= 200 && ev.target.status < 300) {\n          const resp = opts.getResponseData(xhr)\n          const uploadURL = resp[opts.responseUrlFieldName]\n\n          this.core.emit('core:upload-success', file.id, resp, uploadURL)\n\n          if (uploadURL) {\n            this.core.log(`Download ${file.name} from ${file.uploadURL}`)\n          }\n\n          return resolve(file)\n        } else {\n          this.core.emit('core:upload-error', file.id, xhr)\n          return reject('Upload error')\n        }\n\n        // var upload = {}\n        //\n        // if (opts.bundle) {\n        //   upload = {files: files}\n        // } else {\n        //   upload = {file: files[current]}\n        // }\n      })\n\n      xhr.addEventListener('error', (ev) => {\n        this.core.emit('core:upload-error', file.id)\n        return reject('Upload error')\n      })\n\n      xhr.open(opts.method.toUpperCase(), opts.endpoint, true)\n\n      Object.keys(opts.headers).forEach((header) => {\n        xhr.setRequestHeader(header, opts.headers[header])\n      })\n\n      xhr.send(data)\n\n      this.core.on('core:upload-cancel', (fileID) => {\n        if (fileID === file.id) {\n          xhr.abort()\n        }\n      })\n\n      this.core.on('core:cancel-all', () => {\n        // const files = this.core.getState().files\n        // if (!files[file.id]) return\n        xhr.abort()\n      })\n\n      this.core.emit('core:upload-started', file.id)\n    })\n  }\n\n  uploadRemote (file, current, total) {\n    const opts = Object.assign({}, this.opts, file.xhrUpload || {})\n    return new Promise((resolve, reject) => {\n      this.core.emit('core:upload-started', file.id)\n\n      fetch(file.remote.url, {\n        method: 'post',\n        credentials: 'include',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(Object.assign({}, file.remote.body, {\n          endpoint: opts.endpoint,\n          size: file.data.size,\n          fieldname: opts.fieldName\n        }))\n      })\n      .then((res) => {\n        if (res.status < 200 && res.status > 300) {\n          return reject(res.statusText)\n        }\n\n        res.json().then((data) => {\n          const token = data.token\n          const host = Utils.getSocketHost(file.remote.host)\n          const socket = new UppySocket({ target: `${host}/api/${token}` })\n\n          socket.on('progress', (progressData) => Utils.emitSocketProgress(this, progressData, file))\n\n          socket.on('success', (data) => {\n            this.core.emit('core:upload-success', file.id, data, data.url)\n            socket.close()\n            return resolve()\n          })\n        })\n      })\n    })\n  }\n\n  selectForUpload (files) {\n    files.forEach((file, i) => {\n      const current = parseInt(i, 10) + 1\n      const total = files.length\n\n      if (file.isRemote) {\n        this.uploadRemote(file, current, total)\n      } else {\n        this.upload(file, current, total)\n      }\n    })\n\n    //   if (this.opts.bundle) {\n    //     uploaders.push(this.upload(files, 0, files.length))\n    //   } else {\n    //     for (let i in files) {\n    //       uploaders.push(this.upload(files, i, files.length))\n    //     }\n    //   }\n  }\n\n  handleUpload (fileIDs) {\n    if (fileIDs.length === 0) {\n      this.core.log('XHRUpload: no files to upload!')\n      return Promise.resolve()\n    }\n\n    this.core.log('XHRUpload is uploading...')\n    const files = fileIDs.map(getFile, this)\n    function getFile (fileID) {\n      return this.core.state.files[fileID]\n    }\n\n    this.selectForUpload(files)\n\n    return new Promise((resolve) => {\n      this.core.once('core:upload-complete', resolve)\n    })\n  }\n\n  install () {\n    this.core.addUploader(this.handleUpload)\n  }\n\n  uninstall () {\n    this.core.removeUploader(this.handleUpload)\n  }\n}\n"]}