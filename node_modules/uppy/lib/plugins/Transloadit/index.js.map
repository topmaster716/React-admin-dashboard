{"version":3,"sources":["../../../src/plugins/Transloadit/index.js"],"names":["Plugin","require","Client","StatusSocket","module","exports","core","opts","type","id","title","defaultLocale","strings","creatingAssembly","creatingAssemblyFailed","encoding","defaultOptions","waitForEncoding","waitForMetadata","signature","params","fields","getAssemblyOptions","file","options","locale","prepareUpload","bind","afterUpload","validateParams","client","sockets","Error","JSON","parse","err","message","auth","key","fileIDs","Promise","all","map","fileID","getFile","promise","resolve","then","assemblyOptions","dedupeAssemblyOptions","list","dedupeMap","Object","create","forEach","stringify","push","keys","createAssembly","log","expectedFiles","length","assembly","updateState","assemblies","state","assembly_id","attachAssemblyMetadata","meta","assembly_url","filename","name","fieldname","tus","endpoint","tus_url","transloadit","files","setState","emit","connectSocket","catch","shouldWait","findFile","uploadedFile","hasOwnProperty","uploadURL","tus_upload_url","onFileUploadComplete","assemblyId","bus","getAssembly","onResult","stepName","result","original_id","localId","results","concat","onAssemblyFinished","url","getAssemblyStatus","socket","websocket_url","on","error","assembly_ssl_url","reject","mode","allOptions","close","emitter","off","onAssemblyError","install","addPreProcessor","addPostProcessor","uninstall","removePreProcessor","removePostProcessor","newState"],"mappings":"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","file":"index.js","sourcesContent":["const Plugin = require('../Plugin')\nconst Client = require('./Client')\nconst StatusSocket = require('./Socket')\n\n/**\n * Upload files to Transloadit using Tus.\n */\nmodule.exports = class Transloadit extends Plugin {\n  constructor (core, opts) {\n    super(core, opts)\n    this.type = 'uploader'\n    this.id = 'Transloadit'\n    this.title = 'Transloadit'\n\n    const defaultLocale = {\n      strings: {\n        creatingAssembly: 'Preparing upload...',\n        creatingAssemblyFailed: 'Transloadit: Could not create assembly',\n        encoding: 'Encoding...'\n      }\n    }\n\n    const defaultOptions = {\n      waitForEncoding: false,\n      waitForMetadata: false,\n      signature: null,\n      params: null,\n      fields: {},\n      getAssemblyOptions (file, options) {\n        return {\n          params: options.params,\n          signature: options.signature,\n          fields: options.fields\n        }\n      },\n      locale: defaultLocale\n    }\n\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    this.prepareUpload = this.prepareUpload.bind(this)\n    this.afterUpload = this.afterUpload.bind(this)\n\n    if (this.opts.params) {\n      this.validateParams(this.opts.params)\n    }\n\n    this.client = new Client()\n    this.sockets = {}\n  }\n\n  validateParams (params) {\n    if (!params) {\n      throw new Error('Transloadit: The `params` option is required.')\n    }\n\n    if (typeof params === 'string') {\n      try {\n        params = JSON.parse(params)\n      } catch (err) {\n        // Tell the user that this is not an Uppy bug!\n        err.message = 'Transloadit: The `params` option is a malformed JSON string: ' +\n          err.message\n        throw err\n      }\n    }\n\n    if (!params.auth || !params.auth.key) {\n      throw new Error('Transloadit: The `params.auth.key` option is required. ' +\n        'You can find your Transloadit API key at https://transloadit.com/accounts/credentials.')\n    }\n  }\n\n  getAssemblyOptions (fileIDs) {\n    const options = this.opts\n    return Promise.all(\n      fileIDs.map((fileID) => {\n        const file = this.core.getFile(fileID)\n        const promise = Promise.resolve(options.getAssemblyOptions(file, options))\n        return promise.then((assemblyOptions) => {\n          this.validateParams(assemblyOptions.params)\n\n          return {\n            fileIDs: [fileID],\n            options: assemblyOptions\n          }\n        })\n      })\n    )\n  }\n\n  dedupeAssemblyOptions (list) {\n    const dedupeMap = Object.create(null)\n    list.forEach(({ fileIDs, options }) => {\n      const id = JSON.stringify(options)\n      if (dedupeMap[id]) {\n        dedupeMap[id].fileIDs.push(...fileIDs)\n      } else {\n        dedupeMap[id] = {\n          options,\n          fileIDs: [...fileIDs]\n        }\n      }\n    })\n\n    return Object.keys(dedupeMap).map((id) => dedupeMap[id])\n  }\n\n  createAssembly (fileIDs, options) {\n    this.core.log('Transloadit: create assembly')\n\n    return this.client.createAssembly({\n      params: options.params,\n      fields: options.fields,\n      expectedFiles: fileIDs.length,\n      signature: options.signature\n    }).then((assembly) => {\n      this.updateState({\n        assemblies: Object.assign(this.state.assemblies, {\n          [assembly.assembly_id]: assembly\n        })\n      })\n\n      function attachAssemblyMetadata (file, assembly) {\n        // Attach meta parameters for the Tus plugin. See:\n        // https://github.com/tus/tusd/wiki/Uploading-to-Transloadit-using-tus#uploading-using-tus\n        // TODO Should this `meta` be moved to a `tus.meta` property instead?\n        // If the MetaData plugin can add eg. resize parameters, it doesn't\n        // make much sense to set those as upload-metadata for tus.\n        const meta = Object.assign({}, file.meta, {\n          assembly_url: assembly.assembly_url,\n          filename: file.name,\n          fieldname: 'file'\n        })\n        // Add assembly-specific Tus endpoint.\n        const tus = Object.assign({}, file.tus, {\n          endpoint: assembly.tus_url\n        })\n        const transloadit = {\n          assembly: assembly.assembly_id\n        }\n        return Object.assign(\n          {},\n          file,\n          { meta, tus, transloadit }\n        )\n      }\n\n      const files = Object.assign({}, this.core.state.files)\n      fileIDs.forEach((id) => {\n        files[id] = attachAssemblyMetadata(files[id], assembly)\n      })\n\n      this.core.setState({ files })\n\n      this.core.emit('transloadit:assembly-created', assembly, fileIDs)\n\n      return this.connectSocket(assembly)\n    }).then(() => {\n      this.core.log('Transloadit: Created assembly')\n    }).catch((err) => {\n      this.core.emit('informer', this.opts.locale.strings.creatingAssemblyFailed, 'error', 0)\n\n      // Reject the promise.\n      throw err\n    })\n  }\n\n  shouldWait () {\n    return this.opts.waitForEncoding || this.opts.waitForMetadata\n  }\n\n  findFile (uploadedFile) {\n    const files = this.core.state.files\n    for (const id in files) {\n      if (!files.hasOwnProperty(id)) {\n        continue\n      }\n      if (files[id].uploadURL === uploadedFile.tus_upload_url) {\n        return files[id]\n      }\n    }\n  }\n\n  onFileUploadComplete (assemblyId, uploadedFile) {\n    const file = this.findFile(uploadedFile)\n    this.updateState({\n      files: Object.assign({}, this.state.files, {\n        [uploadedFile.id]: {\n          id: file.id,\n          uploadedFile\n        }\n      })\n    })\n    this.core.bus.emit('transloadit:upload', uploadedFile, this.getAssembly(assemblyId))\n  }\n\n  onResult (assemblyId, stepName, result) {\n    const file = this.state.files[result.original_id]\n    // The `file` may not exist if an import robot was used instead of a file upload.\n    result.localId = file ? file.id : null\n\n    this.updateState({\n      results: this.state.results.concat(result)\n    })\n    this.core.bus.emit('transloadit:result', stepName, result, this.getAssembly(assemblyId))\n  }\n\n  onAssemblyFinished (url) {\n    this.client.getAssemblyStatus(url).then((assembly) => {\n      this.updateState({\n        assemblies: Object.assign({}, this.state.assemblies, {\n          [assembly.assembly_id]: assembly\n        })\n      })\n      this.core.emit('transloadit:complete', assembly)\n    })\n  }\n\n  connectSocket (assembly) {\n    const socket = new StatusSocket(\n      assembly.websocket_url,\n      assembly\n    )\n    this.sockets[assembly.assembly_id] = socket\n\n    socket.on('upload', this.onFileUploadComplete.bind(this, assembly.assembly_id))\n    socket.on('error', (error) => {\n      this.core.emit('transloadit:assembly-error', assembly, error)\n    })\n\n    if (this.opts.waitForEncoding) {\n      socket.on('result', this.onResult.bind(this, assembly.assembly_id))\n    }\n\n    if (this.opts.waitForEncoding) {\n      socket.on('finished', () => {\n        this.onAssemblyFinished(assembly.assembly_ssl_url)\n      })\n    } else if (this.opts.waitForMetadata) {\n      socket.on('metadata', () => {\n        this.onAssemblyFinished(assembly.assembly_ssl_url)\n        this.core.emit('transloadit:complete', assembly)\n      })\n    }\n\n    return new Promise((resolve, reject) => {\n      socket.on('connect', resolve)\n      socket.on('error', reject)\n    }).then(() => {\n      this.core.log('Transloadit: Socket is ready')\n    })\n  }\n\n  prepareUpload (fileIDs) {\n    fileIDs.forEach((fileID) => {\n      this.core.emit('core:preprocess-progress', fileID, {\n        mode: 'indeterminate',\n        message: this.opts.locale.strings.creatingAssembly\n      })\n    })\n\n    const createAssembly = ({ fileIDs, options }) => {\n      return this.createAssembly(fileIDs, options).then(() => {\n        fileIDs.forEach((fileID) => {\n          this.core.emit('core:preprocess-complete', fileID)\n        })\n      })\n    }\n\n    return this.getAssemblyOptions(fileIDs)\n      .then((allOptions) => this.dedupeAssemblyOptions(allOptions))\n      .then((assemblies) => Promise.all(\n        assemblies.map(createAssembly)\n      ))\n  }\n\n  afterUpload (fileIDs) {\n    // A file ID that is part of this assembly...\n    const fileID = fileIDs[0]\n\n    // If we don't have to wait for encoding metadata or results, we can close\n    // the socket immediately and finish the upload.\n    if (!this.shouldWait()) {\n      const file = this.core.getFile(fileID)\n      const socket = this.sockets[file.transloadit.assembly]\n      socket.close()\n      return Promise.resolve()\n    }\n\n    return new Promise((resolve, reject) => {\n      fileIDs.forEach((fileID) => {\n        this.core.emit('core:postprocess-progress', fileID, {\n          mode: 'indeterminate',\n          message: this.opts.locale.strings.encoding\n        })\n      })\n\n      const onAssemblyFinished = (assembly) => {\n        const file = this.core.getFile(fileID)\n        // An assembly for a different upload just finished. We can ignore it.\n        if (assembly.assembly_id !== file.transloadit.assembly) {\n          return\n        }\n        // Remove this handler once we find the assembly we needed.\n        this.core.emitter.off('transloadit:complete', onAssemblyFinished)\n\n        // TODO set the `file.uploadURL` to a result?\n        // We will probably need an option here so the plugin user can tell us\n        // which result to pick…?\n\n        fileIDs.forEach((fileID) => {\n          this.core.emit('core:postprocess-complete', fileID)\n        })\n\n        resolve()\n      }\n\n      const onAssemblyError = (assembly, error) => {\n        const file = this.core.getFile(fileID)\n        // An assembly for a different upload just errored. We can ignore it.\n        if (assembly.assembly_id !== file.transloadit.assembly) {\n          return\n        }\n        // Remove this handler once we find the assembly we needed.\n        this.core.emitter.off('transloadit:assembly-error', onAssemblyError)\n\n        // Clear postprocessing state for all our files.\n        fileIDs.forEach((fileID) => {\n          this.core.emit('core:postprocess-complete', fileID)\n        })\n\n        // Reject the `afterUpload()` promise.\n        reject(error)\n      }\n\n      this.core.on('transloadit:complete', onAssemblyFinished)\n      this.core.on('transloadit:assembly-error', onAssemblyError)\n    })\n  }\n\n  install () {\n    this.core.addPreProcessor(this.prepareUpload)\n    this.core.addPostProcessor(this.afterUpload)\n\n    this.updateState({\n      assemblies: {},\n      files: {},\n      results: []\n    })\n  }\n\n  uninstall () {\n    this.core.removePreProcessor(this.prepareUpload)\n    this.core.removePostProcessor(this.afterUpload)\n  }\n\n  getAssembly (id) {\n    return this.state.assemblies[id]\n  }\n\n  get state () {\n    return this.core.state.transloadit || {}\n  }\n\n  updateState (newState) {\n    const transloadit = Object.assign({}, this.state, newState)\n\n    this.core.setState({ transloadit })\n  }\n}\n"]}