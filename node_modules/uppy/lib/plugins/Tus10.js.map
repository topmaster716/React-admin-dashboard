{"version":3,"sources":["../../src/plugins/Tus10.js"],"names":["Plugin","require","tus","UppySocket","Utils","tusDefaultOptions","endpoint","resume","onProgress","onChunkComplete","onSuccess","onError","headers","chunkSize","Infinity","withCredentials","uploadUrl","uploadSize","overridePatchMethod","retryDelays","module","exports","core","opts","type","id","title","defaultOptions","allowPause","autoRetry","handlePauseAll","bind","handleResumeAll","handleUpload","pauseResume","action","fileID","updatedFiles","getState","files","inProgressUpdatedFiles","Object","keys","filter","file","progress","uploadComplete","uploadStarted","wasPaused","isPaused","updatedFile","setState","forEach","upload","current","total","log","resolve","reject","optsTus","err","emit","bytesUploaded","bytesTotal","onReceiveUploadUrl","url","uploader","name","metadata","meta","Upload","data","onFileRemove","targetFileID","abort","onPause","start","onPauseAll","onResumeAll","on","uploadRemote","remote","serverToken","connectToServerSocket","emitter","fetch","method","credentials","body","JSON","stringify","protocol","size","then","res","status","statusText","json","token","getFile","updateFile","host","getSocketHost","socket","target","send","progressData","emitSocketProgress","close","state","uploadURL","currentFile","newFile","cb","uploadFiles","index","parseInt","length","isRemote","fileIDs","Promise","filesToUpload","map","once","actions","addResumableUploadsCapabilityFlag","newCapabilities","capabilities","resumableUploads","install","addUploader","uninstall","removeUploader","off"],"mappings":"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","file":"Tus10.js","sourcesContent":["const Plugin = require('./Plugin')\nconst tus = require('tus-js-client')\nconst UppySocket = require('../core/UppySocket')\nconst Utils = require('../core/Utils')\nrequire('whatwg-fetch')\n\n// Extracted from https://github.com/tus/tus-js-client/blob/master/lib/upload.js#L13\n// excepted we removed 'fingerprint' key to avoid adding more dependencies\nconst tusDefaultOptions = {\n  endpoint: '',\n  resume: true,\n  onProgress: null,\n  onChunkComplete: null,\n  onSuccess: null,\n  onError: null,\n  headers: {},\n  chunkSize: Infinity,\n  withCredentials: false,\n  uploadUrl: null,\n  uploadSize: null,\n  overridePatchMethod: false,\n  retryDelays: null\n}\n\n/**\n * Tus resumable file uploader\n *\n */\nmodule.exports = class Tus10 extends Plugin {\n  constructor (core, opts) {\n    super(core, opts)\n    this.type = 'uploader'\n    this.id = 'Tus'\n    this.title = 'Tus'\n\n    // set default options\n    const defaultOptions = {\n      resume: true,\n      allowPause: true,\n      autoRetry: true,\n      retryDelays: [0, 1000, 3000, 5000]\n    }\n\n    // merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.handlePauseAll = this.handlePauseAll.bind(this)\n    this.handleResumeAll = this.handleResumeAll.bind(this)\n    this.handleUpload = this.handleUpload.bind(this)\n  }\n\n  pauseResume (action, fileID) {\n    const updatedFiles = Object.assign({}, this.core.getState().files)\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return !updatedFiles[file].progress.uploadComplete &&\n             updatedFiles[file].progress.uploadStarted\n    })\n\n    switch (action) {\n      case 'toggle':\n        if (updatedFiles[fileID].uploadComplete) return\n\n        const wasPaused = updatedFiles[fileID].isPaused || false\n        const isPaused = !wasPaused\n        let updatedFile\n        if (wasPaused) {\n          updatedFile = Object.assign({}, updatedFiles[fileID], {\n            isPaused: false\n          })\n        } else {\n          updatedFile = Object.assign({}, updatedFiles[fileID], {\n            isPaused: true\n          })\n        }\n        updatedFiles[fileID] = updatedFile\n        this.core.setState({files: updatedFiles})\n        return isPaused\n      case 'pauseAll':\n        inProgressUpdatedFiles.forEach((file) => {\n          const updatedFile = Object.assign({}, updatedFiles[file], {\n            isPaused: true\n          })\n          updatedFiles[file] = updatedFile\n        })\n        this.core.setState({files: updatedFiles})\n        return\n      case 'resumeAll':\n        inProgressUpdatedFiles.forEach((file) => {\n          const updatedFile = Object.assign({}, updatedFiles[file], {\n            isPaused: false\n          })\n          updatedFiles[file] = updatedFile\n        })\n        this.core.setState({files: updatedFiles})\n        return\n    }\n  }\n\n  handlePauseAll () {\n    this.pauseResume('pauseAll')\n  }\n\n  handleResumeAll () {\n    this.pauseResume('resumeAll')\n  }\n\n  /**\n   * Create a new Tus upload\n   *\n   * @param {object} file for use with upload\n   * @param {integer} current file in a queue\n   * @param {integer} total number of files in a queue\n   * @returns {Promise}\n   */\n  upload (file, current, total) {\n    this.core.log(`uploading ${current} of ${total}`)\n\n    // Create a new tus upload\n    return new Promise((resolve, reject) => {\n      const optsTus = Object.assign(\n        {},\n        tusDefaultOptions,\n        this.opts,\n        // Install file-specific upload overrides.\n        file.tus || {}\n      )\n\n      optsTus.onError = (err) => {\n        this.core.log(err)\n        this.core.emit('core:upload-error', file.id, err)\n        reject('Failed because: ' + err)\n      }\n\n      optsTus.onProgress = (bytesUploaded, bytesTotal) => {\n        this.onReceiveUploadUrl(file, upload.url)\n        this.core.emit('core:upload-progress', {\n          uploader: this,\n          id: file.id,\n          bytesUploaded: bytesUploaded,\n          bytesTotal: bytesTotal\n        })\n      }\n\n      optsTus.onSuccess = () => {\n        this.core.emit('core:upload-success', file.id, upload, upload.url)\n\n        if (upload.url) {\n          this.core.log('Download ' + upload.file.name + ' from ' + upload.url)\n        }\n\n        resolve(upload)\n      }\n      optsTus.metadata = file.meta\n\n      const upload = new tus.Upload(file.data, optsTus)\n\n      this.onFileRemove(file.id, (targetFileID) => {\n        // this.core.log(`removing file: ${targetFileID}`)\n        upload.abort()\n        resolve(`upload ${targetFileID} was removed`)\n      })\n\n      this.onPause(file.id, (isPaused) => {\n        isPaused ? upload.abort() : upload.start()\n      })\n\n      this.onPauseAll(file.id, () => {\n        upload.abort()\n      })\n\n      this.onResumeAll(file.id, () => {\n        upload.start()\n      })\n\n      this.core.on('core:retry-started', () => {\n        const files = this.core.getState().files\n        if (files[file.id].progress.uploadComplete ||\n          !files[file.id].progress.uploadStarted ||\n          files[file.id].isPaused\n            ) {\n          return\n        }\n        upload.start()\n      })\n\n      upload.start()\n      this.core.emit('core:upload-started', file.id, upload)\n    })\n  }\n\n  uploadRemote (file, current, total) {\n    return new Promise((resolve, reject) => {\n      this.core.log(file.remote.url)\n      if (file.serverToken) {\n        this.connectToServerSocket(file)\n      } else {\n        let endpoint = this.opts.endpoint\n        if (file.tus && file.tus.endpoint) {\n          endpoint = file.tus.endpoint\n        }\n\n        this.core.emitter.emit('core:upload-started', file.id)\n\n        fetch(file.remote.url, {\n          method: 'post',\n          credentials: 'include',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(Object.assign({}, file.remote.body, {\n            endpoint,\n            protocol: 'tus',\n            size: file.data.size,\n            metadata: file.meta\n          }))\n        })\n        .then((res) => {\n          if (res.status < 200 && res.status > 300) {\n            return reject(res.statusText)\n          }\n\n          res.json().then((data) => {\n            const token = data.token\n            file = this.getFile(file.id)\n            file.serverToken = token\n            this.updateFile(file)\n            this.connectToServerSocket(file)\n            resolve()\n          })\n        })\n      }\n    })\n  }\n\n  connectToServerSocket (file) {\n    const token = file.serverToken\n    const host = Utils.getSocketHost(file.remote.host)\n    const socket = new UppySocket({ target: `${host}/api/${token}` })\n\n    this.onFileRemove(file.id, () => socket.send('pause', {}))\n\n    this.onPause(file.id, (isPaused) => {\n      isPaused ? socket.send('pause', {}) : socket.send('resume', {})\n    })\n\n    this.onPauseAll(file.id, () => socket.send('pause', {}))\n    this.onResumeAll(file.id, () => socket.send('resume', {}))\n\n    socket.on('progress', (progressData) => Utils.emitSocketProgress(this, progressData, file))\n\n    socket.on('success', (data) => {\n      this.core.emitter.emit('core:upload-success', file.id, data, data.url)\n      socket.close()\n    })\n  }\n\n  getFile (fileID) {\n    return this.core.state.files[fileID]\n  }\n\n  updateFile (file) {\n    const files = Object.assign({}, this.core.state.files, {\n      [file.id]: file\n    })\n    this.core.setState({ files })\n  }\n\n  onReceiveUploadUrl (file, uploadURL) {\n    const currentFile = this.getFile(file.id)\n    if (!currentFile) return\n    // Only do the update if we didn't have an upload URL yet.\n    if (!currentFile.tus || currentFile.tus.uploadUrl !== uploadURL) {\n      const newFile = Object.assign({}, currentFile, {\n        tus: Object.assign({}, currentFile.tus, {\n          uploadUrl: uploadURL\n        })\n      })\n      this.updateFile(newFile)\n    }\n  }\n\n  onFileRemove (fileID, cb) {\n    this.core.on('core:file-removed', (targetFileID) => {\n      if (fileID === targetFileID) cb(targetFileID)\n    })\n  }\n\n  onPause (fileID, cb) {\n    this.core.on('core:upload-pause', (targetFileID) => {\n      if (fileID === targetFileID) {\n        const isPaused = this.pauseResume('toggle', fileID)\n        cb(isPaused)\n      }\n    })\n  }\n\n  onPauseAll (fileID, cb) {\n    this.core.on('core:pause-all', () => {\n      if (!this.core.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  onResumeAll (fileID, cb) {\n    this.core.on('core:resume-all', () => {\n      if (!this.core.getFile(fileID)) return\n      cb()\n    })\n  }\n\n  uploadFiles (files) {\n    files.forEach((file, index) => {\n      const current = parseInt(index, 10) + 1\n      const total = files.length\n\n      if (!file.isRemote) {\n        this.upload(file, current, total)\n      } else {\n        this.uploadRemote(file, current, total)\n      }\n    })\n  }\n\n  handleUpload (fileIDs) {\n    if (fileIDs.length === 0) {\n      this.core.log('Tus: no files to upload!')\n      return Promise.resolve()\n    }\n\n    this.core.log('Tus is uploading...')\n    const filesToUpload = fileIDs.map((fileID) => this.core.getFile(fileID))\n\n    this.uploadFiles(filesToUpload)\n\n    return new Promise((resolve) => {\n      this.core.once('core:upload-complete', resolve)\n    })\n  }\n\n  actions () {\n    this.core.on('core:pause-all', this.handlePauseAll)\n    this.core.on('core:resume-all', this.handleResumeAll)\n\n    if (this.opts.autoRetry) {\n      this.core.on('back-online', () => {\n        this.core.emit('core:retry-started')\n      })\n    }\n  }\n\n  addResumableUploadsCapabilityFlag () {\n    const newCapabilities = Object.assign({}, this.core.getState().capabilities)\n    newCapabilities.resumableUploads = true\n    this.core.setState({\n      capabilities: newCapabilities\n    })\n  }\n\n  install () {\n    this.addResumableUploadsCapabilityFlag()\n    this.core.addUploader(this.handleUpload)\n    this.actions()\n  }\n\n  uninstall () {\n    this.core.removeUploader(this.handleUpload)\n    this.core.off('core:pause-all', this.handlePauseAll)\n    this.core.off('core:resume-all', this.handleResumeAll)\n  }\n}\n"]}